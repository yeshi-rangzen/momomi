// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MomomiAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MomomiAPI.Migrations
{
    [DbContext(typeof(MomomiDbContext))]
    [Migration("20250704053111_AddedUpdatedFieldInUserLike")]
    partial class AddedUpdatedFieldInUserLike
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user1_id");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user2_id");

                    b.HasKey("Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("idx_conversations_users");

                    b.ToTable("conversations", t =>
                        {
                            t.HasCheckConstraint("CHK_Conversation_UserOrder", "user1_id < user2_id");
                        });
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("message_type");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("ConversationId", "IsRead")
                        .HasDatabaseName("idx_messages_unread")
                        .HasFilter("is_read = false");

                    b.HasIndex("ConversationId", "SentAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_messages_conversation");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("education_level");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EnableGlobalDiscovery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enable_global_discovery");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<int?>("HeightCm")
                        .HasColumnType("integer")
                        .HasColumnName("height_cm");

                    b.Property<string>("Heritage")
                        .HasColumnType("text")
                        .HasColumnName("heritage");

                    b.Property<string>("InterestedIn")
                        .HasColumnType("text")
                        .HasColumnName("interested_in");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.PrimitiveCollection<List<string>>("LanguagesSpoken")
                        .HasColumnType("text[]")
                        .HasColumnName("languages_spoken");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<int>("MaxDistanceKm")
                        .HasColumnType("integer")
                        .HasColumnName("max_distance_km");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer")
                        .HasColumnName("min_age");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Religion")
                        .HasColumnType("text")
                        .HasColumnName("religion");

                    b.Property<Guid>("SupabaseUid")
                        .HasColumnType("uuid")
                        .HasColumnName("supabase_uid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("DateOfBirth")
                        .HasDatabaseName("idx_users_age")
                        .HasFilter("is_active = true");

                    b.HasIndex("EnableGlobalDiscovery")
                        .HasDatabaseName("idx_users_global_discovery")
                        .HasFilter("is_active = true");

                    b.HasIndex("Heritage")
                        .HasDatabaseName("idx_users_heritage")
                        .HasFilter("is_active = true");

                    b.HasIndex("SupabaseUid")
                        .IsUnique()
                        .HasDatabaseName("idx_users_supabase_uid");

                    b.HasIndex("IsActive", "LastActive")
                        .HasDatabaseName("idx_users_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("idx_users_location")
                        .HasFilter("is_active = true");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsLike")
                        .HasColumnType("boolean")
                        .HasColumnName("is_like");

                    b.Property<bool>("IsMatch")
                        .HasColumnType("boolean")
                        .HasColumnName("is_match");

                    b.Property<Guid>("LikedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("liked_user_id");

                    b.Property<Guid>("LikerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("liker_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("IsMatch")
                        .HasDatabaseName("idx_user_likes_match")
                        .HasFilter("is_match = true");

                    b.HasIndex("LikedUserId")
                        .HasDatabaseName("idx_user_likes_liked");

                    b.HasIndex("LikerUserId")
                        .HasDatabaseName("idx_user_likes_liker");

                    b.HasIndex("LikerUserId", "LikedUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_likes_unique");

                    b.ToTable("user_likes");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CloudinaryPublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cloudinary_public_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int>("PhotoOrder")
                        .HasColumnType("integer")
                        .HasColumnName("photo_order");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_photos_primary")
                        .HasFilter("is_primary = true");

                    b.HasIndex("UserId", "PhotoOrder")
                        .HasDatabaseName("idx_user_photos_user_id");

                    b.ToTable("user_photos");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CulturalImportanceLevel")
                        .HasColumnType("integer")
                        .HasColumnName("cultural_importance_level");

                    b.PrimitiveCollection<List<string>>("LanguagePreference")
                        .HasColumnType("text[]")
                        .HasColumnName("language_preference");

                    b.Property<string>("PreferredHeritage")
                        .HasColumnType("text")
                        .HasColumnName("preferred_heritage");

                    b.Property<string>("PreferredReligions")
                        .HasColumnType("text")
                        .HasColumnName("preferred_religions");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_preferences_user_id");

                    b.ToTable("user_preferences");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reason");

                    b.Property<Guid>("ReportedId")
                        .HasColumnType("uuid")
                        .HasColumnName("reported_id");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid")
                        .HasColumnName("reporter_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ReportedId")
                        .HasDatabaseName("idx_user_reports_reported");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("idx_user_reports_reporter");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_user_reports_status");

                    b.ToTable("user_reports");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User1")
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "User2")
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Message", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserLike", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "LikedUser")
                        .WithMany("LikesReceived")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "LikerUser")
                        .WithMany("LikesGiven")
                        .HasForeignKey("LikerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("LikerUser");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPhoto", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPreference", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("MomomiAPI.Models.Entities.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserReport", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "Reported")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReportedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "Reporter")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reported");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.User", b =>
                {
                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");

                    b.Navigation("LikesGiven");

                    b.Navigation("LikesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");

                    b.Navigation("Preferences");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
