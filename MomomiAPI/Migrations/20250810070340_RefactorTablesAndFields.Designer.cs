// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MomomiAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MomomiAPI.Migrations
{
    [DbContext(typeof(MomomiDbContext))]
    [Migration("20250810070340_RefactorTablesAndFields")]
    partial class RefactorTablesAndFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user1_id");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user2_id");

                    b.HasKey("Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("idx_conversations_users_unique");

                    b.HasIndex("User1Id", "IsActive", "UpdatedAt")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("idx_conversations_user1_active");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("User1Id", "IsActive", "UpdatedAt"), new[] { "User2Id", "CreatedAt" });

                    b.HasIndex("User1Id", "User2Id", "IsActive")
                        .HasDatabaseName("idx_conversations_users_active");

                    b.HasIndex("User2Id", "IsActive", "UpdatedAt")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("idx_conversations_user2_active");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("User2Id", "IsActive", "UpdatedAt"), new[] { "User1Id", "CreatedAt" });

                    b.ToTable("conversations", t =>
                        {
                            t.HasCheckConstraint("CHK_Conversation_UserOrder", "user1_id < user2_id");
                        });
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("message_type");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId", "IsRead")
                        .HasDatabaseName("idx_messages_conversation_read")
                        .HasFilter("is_read = false");

                    b.HasIndex("ConversationId", "SentAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_messages_last_message");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ConversationId", "SentAt"), new[] { "SenderId", "Content", "MessageType", "IsRead" });

                    b.HasIndex("SenderId", "SentAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_messages_sender_time");

                    b.HasIndex("ConversationId", "SenderId", "IsRead")
                        .HasDatabaseName("idx_messages_unread_count")
                        .HasFilter("is_read = false");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ConversationId", "SenderId", "IsRead"), new[] { "SentAt" });

                    b.ToTable("messages");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.PushNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_push_notifications_user_id");

                    b.HasIndex("IsSent", "CreatedAt")
                        .HasDatabaseName("idx_push_notifications_sent_created");

                    b.HasIndex("UserId", "IsRead")
                        .HasDatabaseName("idx_push_notifications_user_read");

                    b.ToTable("push_notifications");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Children")
                        .HasColumnType("text")
                        .HasColumnName("children");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Drinking")
                        .HasColumnType("text")
                        .HasColumnName("drinking");

                    b.Property<string>("Drugs")
                        .HasColumnType("text")
                        .HasColumnName("drugs");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("education_level");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EnableGlobalDiscovery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("enable_global_discovery");

                    b.Property<string>("FamilyPlan")
                        .HasColumnType("text")
                        .HasColumnName("family_plan");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<int>("HeightCm")
                        .HasColumnType("integer")
                        .HasColumnName("height_cm");

                    b.Property<string>("Heritage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("heritage");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("hometown");

                    b.Property<string>("InterestedIn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interested_in");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDiscoverable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_discoverable");

                    b.Property<bool>("IsGloballyDiscoverable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_globally_discoverable");

                    b.Property<bool>("IsOnboarding")
                        .HasColumnType("boolean")
                        .HasColumnName("is_onboarding");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("LanguagesSpoken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("languages_spoken");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Marijuana")
                        .HasColumnType("text")
                        .HasColumnName("marijuana");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<int>("MaxDistanceKm")
                        .HasColumnType("integer")
                        .HasColumnName("max_distance_km");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer")
                        .HasColumnName("min_age");

                    b.Property<string>("Neighbourhood")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("neighbourhood");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("notifications_enabled");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PushToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("push_token");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("religion");

                    b.Property<string>("Smoking")
                        .HasColumnType("text")
                        .HasColumnName("smoking");

                    b.Property<Guid>("SupabaseUid")
                        .HasColumnType("uuid")
                        .HasColumnName("supabase_uid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("SupabaseUid")
                        .IsUnique()
                        .HasDatabaseName("idx_users_supabase_uid");

                    b.HasIndex("IsActive", "LastActive")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_users_active_last")
                        .HasFilter("is_active = true");

                    b.HasIndex("IsActive", "DateOfBirth", "Gender")
                        .HasDatabaseName("idx_users_age_gender")
                        .HasFilter("is_active = true");

                    b.HasIndex("IsActive", "IsDiscoverable", "Gender", "InterestedIn")
                        .HasDatabaseName("idx_users_discovery_main")
                        .HasFilter("is_active = true AND is_discoverable = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsDiscoverable", "Gender", "InterestedIn"), new[] { "DateOfBirth", "Heritage", "Latitude", "Longitude", "EnableGlobalDiscovery", "IsGloballyDiscoverable", "LastActive" });

                    b.HasIndex("IsActive", "IsDiscoverable", "Latitude", "Longitude")
                        .HasDatabaseName("idx_users_location_discovery")
                        .HasFilter("is_active = true AND is_discoverable = true AND latitude IS NOT NULL AND longitude IS NOT NULL");

                    b.HasIndex("IsActive", "IsGloballyDiscoverable", "EnableGlobalDiscovery", "Gender")
                        .HasDatabaseName("idx_users_global_discovery")
                        .HasFilter("is_active = true AND is_globally_discoverable = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsGloballyDiscoverable", "EnableGlobalDiscovery", "Gender"), new[] { "DateOfBirth", "Heritage", "InterestedIn", "LastActive" });

                    b.ToTable("users");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int>("PhotoOrder")
                        .HasColumnType("integer")
                        .HasColumnName("photo_order");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("storage_path");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_photos_primary")
                        .HasFilter("is_primary = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId"), new[] { "Url" });

                    b.HasIndex("UserId", "PhotoOrder")
                        .HasDatabaseName("idx_user_photos_order");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "PhotoOrder"), new[] { "IsPrimary", "Url" });

                    b.HasIndex("UserId", "IsPrimary", "PhotoOrder")
                        .HasDatabaseName("idx_user_photos_display");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "IsPrimary", "PhotoOrder"), new[] { "Url", "CreatedAt" });

                    b.ToTable("user_photos");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LanguagePreference")
                        .HasColumnType("text")
                        .HasColumnName("language_preference");

                    b.Property<string>("PreferredChildren")
                        .HasColumnType("text")
                        .HasColumnName("preferred_children");

                    b.Property<string>("PreferredDrinking")
                        .HasColumnType("text")
                        .HasColumnName("preferred_drinking");

                    b.Property<string>("PreferredDrugs")
                        .HasColumnType("text")
                        .HasColumnName("preferred_drugs");

                    b.Property<string>("PreferredEducationLevels")
                        .HasColumnType("text")
                        .HasColumnName("preferred_education_levels");

                    b.Property<string>("PreferredFamilyPlans")
                        .HasColumnType("text")
                        .HasColumnName("preferred_family_plans");

                    b.Property<int?>("PreferredHeightMax")
                        .HasColumnType("integer")
                        .HasColumnName("preferred_height_max");

                    b.Property<int?>("PreferredHeightMin")
                        .HasColumnType("integer")
                        .HasColumnName("preferred_height_min");

                    b.Property<string>("PreferredHeritage")
                        .HasColumnType("text")
                        .HasColumnName("preferred_heritage");

                    b.Property<string>("PreferredMarijuana")
                        .HasColumnType("text")
                        .HasColumnName("preferred_marijuana");

                    b.Property<string>("PreferredReligions")
                        .HasColumnType("text")
                        .HasColumnName("preferred_religions");

                    b.Property<string>("PreferredSmoking")
                        .HasColumnType("text")
                        .HasColumnName("preferred_smoking");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_preferences_user_id");

                    b.ToTable("user_preferences");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text")
                        .HasColumnName("admin_notes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("ReportedId")
                        .HasColumnType("uuid")
                        .HasColumnName("reported_id");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid")
                        .HasColumnName("reporter_id");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Reason")
                        .HasDatabaseName("idx_user_reports_reason");

                    b.HasIndex("ReportedId")
                        .HasDatabaseName("idx_user_reports_reported");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("idx_user_reports_reporter");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_user_reports_status");

                    b.ToTable("user_reports");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscription_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_subscriptions_active_expires");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_subscriptions_user_id");

                    b.ToTable("user_subscriptions");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserSwipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("SwipeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("swipe_type");

                    b.Property<Guid>("SwipedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("swiped_user_id");

                    b.Property<Guid>("SwiperUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("swiper_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("SwipedUserId");

                    b.HasIndex("SwiperUserId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_user_swipes_recent");

                    b.HasIndex("SwiperUserId", "SwipeType")
                        .HasDatabaseName("idx_user_swipes_received");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("SwiperUserId", "SwipeType"), new[] { "SwipedUserId", "CreatedAt" });

                    b.HasIndex("SwiperUserId", "SwipedUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_swipes_unique");

                    b.ToTable("user_swipes");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserUsageLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AdsWatchedToday")
                        .HasColumnType("integer")
                        .HasColumnName("ads_watched_today");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastResetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_reset_date");

                    b.Property<int>("LikesUsedToday")
                        .HasColumnType("integer")
                        .HasColumnName("likes_used_today");

                    b.Property<int>("SuperLikesUsedToday")
                        .HasColumnType("integer")
                        .HasColumnName("super_likes_used_today");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LastResetDate")
                        .HasDatabaseName("idx_user_usage_limits_reset_date");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_usage_limits_user_id");

                    b.ToTable("user_usage_limits");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User1")
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "User2")
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Message", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.PushNotification", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPhoto", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserPreference", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("MomomiAPI.Models.Entities.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserReport", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "Reported")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReportedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "Reporter")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reported");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserSubscription", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("MomomiAPI.Models.Entities.UserSubscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserSwipe", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "SwipedUser")
                        .WithMany("SwipesReceived")
                        .HasForeignKey("SwipedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MomomiAPI.Models.Entities.User", "SwiperUser")
                        .WithMany("SwipesGiven")
                        .HasForeignKey("SwiperUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SwipedUser");

                    b.Navigation("SwiperUser");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.UserUsageLimit", b =>
                {
                    b.HasOne("MomomiAPI.Models.Entities.User", "User")
                        .WithOne("UsageLimit")
                        .HasForeignKey("MomomiAPI.Models.Entities.UserUsageLimit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MomomiAPI.Models.Entities.User", b =>
                {
                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Photos");

                    b.Navigation("Preferences");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");

                    b.Navigation("Subscription");

                    b.Navigation("SwipesGiven");

                    b.Navigation("SwipesReceived");

                    b.Navigation("UsageLimit");
                });
#pragma warning restore 612, 618
        }
    }
}
